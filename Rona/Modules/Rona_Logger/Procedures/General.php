<?php

namespace Rona\Modules\Rona_Logger\Procedures;

/**
 * General procedures
 */
class General extends \Rona\Procedure_Group {

	/**
	 * @see parent class
	 */
	protected function register_procedures() {

		/**
		 * Deploy RonaPHP Logger.
		 */
		$this->register('deploy',
			function($param_exam, $raw_input) {},
			function($input) {

				// Open DB connection.
				$mysqli = $this->get_module_resource('rona', 'db')->mysqli;

				// Determine the current DB version. If this is a new install, the DB version will remain at 0.
				$current_db_version = 0;
				$stmt = $mysqli->prepare("SHOW TABLES LIKE '{$this->config('db_table_prefix')}';");
				$is_success = $stmt->execute();
				$rs = $stmt->get_result();
				$stmt->close();
				if (!$is_success)
					return $this->failure('unknown_error');
				if ($rs->num_rows === 1) {
					$stmt = $mysqli->prepare("SELECT db_version FROM {$this->config('db_table_prefix')} LIMIT 1;");
					$is_success = $stmt->execute();
					$rs = $stmt->get_result();
					$stmt->close();
					if (!$is_success)
						return $this->failure('unknown_error');
					if ($rs->num_rows === 1)
						$current_db_version = $rs->fetch_assoc()['db_version'];
				}

				// Loop through the DB updates and apply the queries, as applicable.
				foreach ($this->config('db_updates') as $db_version => $queries) {
					if ($db_version > $current_db_version) {
						foreach ($queries as $query) {
							$mysqli->query($query);
							$mysqli->query("TRUNCATE {$this->config('db_table_prefix')};");
							$mysqli->query("INSERT INTO {$this->config('db_table_prefix')} SET db_version = $db_version;");
						}
					}
				}

				// Close DB connection.
				$mysqli->close();

				// Success
				return $this->success('deployment_successful');
			}
		);

		/**
		 * Generate and email a report of log entries.
		 */
		$this->register('email_report',
			function($param_exam, $raw_input) {},
			function($input) {

				// Get the entries.
				$mysqli = $this->get_module_resource('rona', 'db')->mysqli;
				$stmt = $mysqli->prepare("SELECT * FROM {$this->config('db_table_prefix')}_entries WHERE when_created >= now() - INTERVAL {$this->config('email_report.minute_interval')} MINUTE;");
				$is_success = $stmt->execute();
				$rs = $stmt->get_result();
				$stmt->close();
				$mysqli->close();
				if (!$is_success)
					return $this->failure('unknown_error');
				$entries = $rs->fetch_all(MYSQLI_ASSOC);
				$total_entries = count($entries);

				// If entries were found, proceed.
				if ($total_entries) {

					// Compile the entries.
					$compilation = [];
					foreach ($entries as $entry) {
						if (!isset($compilation[$entry['tag']][$entry['description']])) {
							$compilation[$entry['tag']][$entry['description']] = [
								'entry_id'	=> $entry['entry_id'],
								'count'		=> 1
							];
						} else
							$compilation[$entry['tag']][$entry['description']]['count']++;
					}

					// Generate the email body.
					ob_start();
						foreach ($compilation as $tag => $entries_by_tag) {
							?>
							<strong>Tag: <?php echo $tag ?></strong>
							<br>
							<ul>
								<?php
								foreach ($entries_by_tag as $description => $parts) {
									?>
									<li>(<?php echo $parts['count'] ?>) <a href="<?php echo $this->config('view_entry_url')('/' . $this->config('route_base') . '/entry/' . $parts['entry_id']) ?>"><?php echo $description ?></a></li>
									<?php
								}
								?>
							</ul>
							<br>
							<?php
						}
						?>
						<em>This report was generated by <?php echo $this->config('display_name') ?>.</em>
						<?php
					$body = ob_get_clean();

					// Send email
					$from = $this->config('display_name');
					$subject = $total_entries . ' Log Entr' . ($total_entries == 1 ? 'y' : 'ies') . ' (v. ' . time() . ')';
					$this->config('email_report.email_handler')($from, $subject, $body);
				}

				// Success
				return $this->success('success');
			}
		);
	}
}